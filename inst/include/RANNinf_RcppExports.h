// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RANNinf_RCPPEXPORTS_H_GEN_
#define RCPP_RANNinf_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace RANNinf {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RANNinf", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RANNinf", "_RANNinf_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RANNinf");
            }
        }
    }

    inline NumericVector get_NN_2Set_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS, int& SEARCHTYPE, int& USEBDTREE, double& SQRAD, NumericVector& distances) {
        typedef SEXP(*Ptr_get_NN_2Set_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_NN_2Set_cpp p_get_NN_2Set_cpp = NULL;
        if (p_get_NN_2Set_cpp == NULL) {
            validateSignature("NumericVector(*get_NN_2Set_cpp)(const NumericMatrix&,const NumericMatrix&,int&,int&,int&,int&,double&,int&,int&,double&,NumericVector&)");
            p_get_NN_2Set_cpp = (Ptr_get_NN_2Set_cpp)R_GetCCallable("RANNinf", "_RANNinf_get_NN_2Set_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_NN_2Set_cpp(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(query_data)), Shield<SEXP>(Rcpp::wrap(D)), Shield<SEXP>(Rcpp::wrap(ND)), Shield<SEXP>(Rcpp::wrap(NQ)), Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(EPS)), Shield<SEXP>(Rcpp::wrap(SEARCHTYPE)), Shield<SEXP>(Rcpp::wrap(USEBDTREE)), Shield<SEXP>(Rcpp::wrap(SQRAD)), Shield<SEXP>(Rcpp::wrap(distances)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline Rcpp::List get_NN_2Set(SEXP R_data, SEXP R_query_data, SEXP R_d, SEXP R_nd, SEXP R_nq, SEXP R_k, SEXP R_error_bound, SEXP R_searchtype, SEXP R_usebdtree, SEXP R_sqRad, SEXP R_distances, SEXP R_verbose) {
        typedef SEXP(*Ptr_get_NN_2Set)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_NN_2Set p_get_NN_2Set = NULL;
        if (p_get_NN_2Set == NULL) {
            validateSignature("Rcpp::List(*get_NN_2Set)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
            p_get_NN_2Set = (Ptr_get_NN_2Set)R_GetCCallable("RANNinf", "_RANNinf_get_NN_2Set");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_NN_2Set(Shield<SEXP>(Rcpp::wrap(R_data)), Shield<SEXP>(Rcpp::wrap(R_query_data)), Shield<SEXP>(Rcpp::wrap(R_d)), Shield<SEXP>(Rcpp::wrap(R_nd)), Shield<SEXP>(Rcpp::wrap(R_nq)), Shield<SEXP>(Rcpp::wrap(R_k)), Shield<SEXP>(Rcpp::wrap(R_error_bound)), Shield<SEXP>(Rcpp::wrap(R_searchtype)), Shield<SEXP>(Rcpp::wrap(R_usebdtree)), Shield<SEXP>(Rcpp::wrap(R_sqRad)), Shield<SEXP>(Rcpp::wrap(R_distances)), Shield<SEXP>(Rcpp::wrap(R_verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline NumericVector get_points_in_radius_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS, int& USEBDTREE, const NumericVector& SQRAD) {
        typedef SEXP(*Ptr_get_points_in_radius_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_points_in_radius_cpp p_get_points_in_radius_cpp = NULL;
        if (p_get_points_in_radius_cpp == NULL) {
            validateSignature("NumericVector(*get_points_in_radius_cpp)(const NumericMatrix&,const NumericMatrix&,int&,int&,int&,int&,double&,int&,const NumericVector&)");
            p_get_points_in_radius_cpp = (Ptr_get_points_in_radius_cpp)R_GetCCallable("RANNinf", "_RANNinf_get_points_in_radius_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_points_in_radius_cpp(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(query_data)), Shield<SEXP>(Rcpp::wrap(D)), Shield<SEXP>(Rcpp::wrap(ND)), Shield<SEXP>(Rcpp::wrap(NQ)), Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(EPS)), Shield<SEXP>(Rcpp::wrap(USEBDTREE)), Shield<SEXP>(Rcpp::wrap(SQRAD)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline List get_points_indices_in_radius_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS, int& USEBDTREE, const NumericVector& SQRAD) {
        typedef SEXP(*Ptr_get_points_indices_in_radius_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_get_points_indices_in_radius_cpp p_get_points_indices_in_radius_cpp = NULL;
        if (p_get_points_indices_in_radius_cpp == NULL) {
            validateSignature("List(*get_points_indices_in_radius_cpp)(const NumericMatrix&,const NumericMatrix&,int&,int&,int&,int&,double&,int&,const NumericVector&)");
            p_get_points_indices_in_radius_cpp = (Ptr_get_points_indices_in_radius_cpp)R_GetCCallable("RANNinf", "_RANNinf_get_points_indices_in_radius_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_points_indices_in_radius_cpp(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(query_data)), Shield<SEXP>(Rcpp::wrap(D)), Shield<SEXP>(Rcpp::wrap(ND)), Shield<SEXP>(Rcpp::wrap(NQ)), Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(EPS)), Shield<SEXP>(Rcpp::wrap(USEBDTREE)), Shield<SEXP>(Rcpp::wrap(SQRAD)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_RANNinf_RCPPEXPORTS_H_GEN_
