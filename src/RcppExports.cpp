// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RANNinf.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// get_NN_2Set_cpp
NumericVector get_NN_2Set_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS, int& SEARCHTYPE, int& USEBDTREE, double& SQRAD, NumericVector& distances);
static SEXP _RANNinf_get_NN_2Set_cpp_try(SEXP dataSEXP, SEXP query_dataSEXP, SEXP DSEXP, SEXP NDSEXP, SEXP NQSEXP, SEXP KSEXP, SEXP EPSSEXP, SEXP SEARCHTYPESEXP, SEXP USEBDTREESEXP, SEXP SQRADSEXP, SEXP distancesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< int& >::type ND(NDSEXP);
    Rcpp::traits::input_parameter< int& >::type NQ(NQSEXP);
    Rcpp::traits::input_parameter< int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double& >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< int& >::type SEARCHTYPE(SEARCHTYPESEXP);
    Rcpp::traits::input_parameter< int& >::type USEBDTREE(USEBDTREESEXP);
    Rcpp::traits::input_parameter< double& >::type SQRAD(SQRADSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type distances(distancesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_NN_2Set_cpp(data, query_data, D, ND, NQ, K, EPS, SEARCHTYPE, USEBDTREE, SQRAD, distances));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RANNinf_get_NN_2Set_cpp(SEXP dataSEXP, SEXP query_dataSEXP, SEXP DSEXP, SEXP NDSEXP, SEXP NQSEXP, SEXP KSEXP, SEXP EPSSEXP, SEXP SEARCHTYPESEXP, SEXP USEBDTREESEXP, SEXP SQRADSEXP, SEXP distancesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RANNinf_get_NN_2Set_cpp_try(dataSEXP, query_dataSEXP, DSEXP, NDSEXP, NQSEXP, KSEXP, EPSSEXP, SEARCHTYPESEXP, USEBDTREESEXP, SQRADSEXP, distancesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_NN_2Set
Rcpp::List get_NN_2Set(SEXP R_data, SEXP R_query_data, SEXP R_d, SEXP R_nd, SEXP R_nq, SEXP R_k, SEXP R_error_bound, SEXP R_searchtype, SEXP R_usebdtree, SEXP R_sqRad, SEXP R_distances, SEXP R_verbose);
static SEXP _RANNinf_get_NN_2Set_try(SEXP R_dataSEXP, SEXP R_query_dataSEXP, SEXP R_dSEXP, SEXP R_ndSEXP, SEXP R_nqSEXP, SEXP R_kSEXP, SEXP R_error_boundSEXP, SEXP R_searchtypeSEXP, SEXP R_usebdtreeSEXP, SEXP R_sqRadSEXP, SEXP R_distancesSEXP, SEXP R_verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_data(R_dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_query_data(R_query_dataSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_d(R_dSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_nd(R_ndSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_nq(R_nqSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_k(R_kSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_error_bound(R_error_boundSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_searchtype(R_searchtypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_usebdtree(R_usebdtreeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_sqRad(R_sqRadSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_distances(R_distancesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_verbose(R_verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_NN_2Set(R_data, R_query_data, R_d, R_nd, R_nq, R_k, R_error_bound, R_searchtype, R_usebdtree, R_sqRad, R_distances, R_verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RANNinf_get_NN_2Set(SEXP R_dataSEXP, SEXP R_query_dataSEXP, SEXP R_dSEXP, SEXP R_ndSEXP, SEXP R_nqSEXP, SEXP R_kSEXP, SEXP R_error_boundSEXP, SEXP R_searchtypeSEXP, SEXP R_usebdtreeSEXP, SEXP R_sqRadSEXP, SEXP R_distancesSEXP, SEXP R_verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RANNinf_get_NN_2Set_try(R_dataSEXP, R_query_dataSEXP, R_dSEXP, R_ndSEXP, R_nqSEXP, R_kSEXP, R_error_boundSEXP, R_searchtypeSEXP, R_usebdtreeSEXP, R_sqRadSEXP, R_distancesSEXP, R_verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_points_in_radius_cpp
NumericVector get_points_in_radius_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS, int& USEBDTREE, const NumericVector& SQRAD);
static SEXP _RANNinf_get_points_in_radius_cpp_try(SEXP dataSEXP, SEXP query_dataSEXP, SEXP DSEXP, SEXP NDSEXP, SEXP NQSEXP, SEXP KSEXP, SEXP EPSSEXP, SEXP USEBDTREESEXP, SEXP SQRADSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< int& >::type ND(NDSEXP);
    Rcpp::traits::input_parameter< int& >::type NQ(NQSEXP);
    Rcpp::traits::input_parameter< int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double& >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< int& >::type USEBDTREE(USEBDTREESEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type SQRAD(SQRADSEXP);
    rcpp_result_gen = Rcpp::wrap(get_points_in_radius_cpp(data, query_data, D, ND, NQ, K, EPS, USEBDTREE, SQRAD));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RANNinf_get_points_in_radius_cpp(SEXP dataSEXP, SEXP query_dataSEXP, SEXP DSEXP, SEXP NDSEXP, SEXP NQSEXP, SEXP KSEXP, SEXP EPSSEXP, SEXP USEBDTREESEXP, SEXP SQRADSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RANNinf_get_points_in_radius_cpp_try(dataSEXP, query_dataSEXP, DSEXP, NDSEXP, NQSEXP, KSEXP, EPSSEXP, USEBDTREESEXP, SQRADSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_points_indices_in_radius_cpp
List get_points_indices_in_radius_cpp(const NumericMatrix& data, const NumericMatrix& query_data, int& D, int& ND, int& NQ, int& K, double& EPS, int& USEBDTREE, const NumericVector& SQRAD);
static SEXP _RANNinf_get_points_indices_in_radius_cpp_try(SEXP dataSEXP, SEXP query_dataSEXP, SEXP DSEXP, SEXP NDSEXP, SEXP NQSEXP, SEXP KSEXP, SEXP EPSSEXP, SEXP USEBDTREESEXP, SEXP SQRADSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< int& >::type D(DSEXP);
    Rcpp::traits::input_parameter< int& >::type ND(NDSEXP);
    Rcpp::traits::input_parameter< int& >::type NQ(NQSEXP);
    Rcpp::traits::input_parameter< int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double& >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< int& >::type USEBDTREE(USEBDTREESEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type SQRAD(SQRADSEXP);
    rcpp_result_gen = Rcpp::wrap(get_points_indices_in_radius_cpp(data, query_data, D, ND, NQ, K, EPS, USEBDTREE, SQRAD));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RANNinf_get_points_indices_in_radius_cpp(SEXP dataSEXP, SEXP query_dataSEXP, SEXP DSEXP, SEXP NDSEXP, SEXP NQSEXP, SEXP KSEXP, SEXP EPSSEXP, SEXP USEBDTREESEXP, SEXP SQRADSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RANNinf_get_points_indices_in_radius_cpp_try(dataSEXP, query_dataSEXP, DSEXP, NDSEXP, NQSEXP, KSEXP, EPSSEXP, USEBDTREESEXP, SQRADSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _RANNinf_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*get_NN_2Set_cpp)(const NumericMatrix&,const NumericMatrix&,int&,int&,int&,int&,double&,int&,int&,double&,NumericVector&)");
        signatures.insert("Rcpp::List(*get_NN_2Set)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP)");
        signatures.insert("NumericVector(*get_points_in_radius_cpp)(const NumericMatrix&,const NumericMatrix&,int&,int&,int&,int&,double&,int&,const NumericVector&)");
        signatures.insert("List(*get_points_indices_in_radius_cpp)(const NumericMatrix&,const NumericMatrix&,int&,int&,int&,int&,double&,int&,const NumericVector&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _RANNinf_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RANNinf", "_RANNinf_get_NN_2Set_cpp", (DL_FUNC)_RANNinf_get_NN_2Set_cpp_try);
    R_RegisterCCallable("RANNinf", "_RANNinf_get_NN_2Set", (DL_FUNC)_RANNinf_get_NN_2Set_try);
    R_RegisterCCallable("RANNinf", "_RANNinf_get_points_in_radius_cpp", (DL_FUNC)_RANNinf_get_points_in_radius_cpp_try);
    R_RegisterCCallable("RANNinf", "_RANNinf_get_points_indices_in_radius_cpp", (DL_FUNC)_RANNinf_get_points_indices_in_radius_cpp_try);
    R_RegisterCCallable("RANNinf", "_RANNinf_RcppExport_validate", (DL_FUNC)_RANNinf_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_RANNinf_get_NN_2Set_cpp", (DL_FUNC) &_RANNinf_get_NN_2Set_cpp, 11},
    {"_RANNinf_get_NN_2Set", (DL_FUNC) &_RANNinf_get_NN_2Set, 12},
    {"_RANNinf_get_points_in_radius_cpp", (DL_FUNC) &_RANNinf_get_points_in_radius_cpp, 9},
    {"_RANNinf_get_points_indices_in_radius_cpp", (DL_FUNC) &_RANNinf_get_points_indices_in_radius_cpp, 9},
    {"_RANNinf_RcppExport_registerCCallable", (DL_FUNC) &_RANNinf_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RANNinf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
